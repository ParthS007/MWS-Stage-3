"use strict";var _createClass=function(){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}}();function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var DBHelper=function(){function i(){_classCallCheck(this,i)}return _createClass(i,null,[{key:"openDatabase",value:function(){return navigator.serviceWorker?idb.open("restaurants",1,function(e){e.createObjectStore("restaurants",{keyPath:"id"})}):Promise.resolve()}},{key:"populateDatabase",value:function(r){return i.openDatabase().then(function(e){if(e){var t=e.transaction("restaurants","readwrite"),n=t.objectStore("restaurants");return r.forEach(function(e){n.put(e)}),t.complete}})}},{key:"getIdbRestaurants",value:function(){return i.openDatabase().then(function(e){if(e)return e.transaction("restaurants").objectStore("restaurants").getAll()})}},{key:"fetchRestaurants",value:function(t){return i.getIdbRestaurants().then(function(e){return e.length?e:fetch(i.DATABASE_URL).then(function(e){return e.json()}).then(function(e){return i.populateDatabase(e),e})}).then(function(e){t(null,e)})}},{key:"fetchRestaurantById",value:function(r,u){i.fetchRestaurants(function(e,t){if(e)u(e,null);else{var n=t.find(function(e){return e.id==r});n?u(null,n):u("Restaurant does not exist",null)}})}},{key:"fetchRestaurantByCuisine",value:function(r,u){i.fetchRestaurants(function(e,t){if(e)u(e,null);else{var n=t.filter(function(e){return e.cuisine_type==r});u(null,n)}})}},{key:"fetchRestaurantByNeighborhood",value:function(r,u){i.fetchRestaurants(function(e,t){if(e)u(e,null);else{var n=t.filter(function(e){return e.neighborhood==r});u(null,n)}})}},{key:"fetchRestaurantByCuisineAndNeighborhood",value:function(r,u,a){i.fetchRestaurants(function(e,t){if(e)a(e,null);else{var n=t;"all"!=r&&(n=n.filter(function(e){return e.cuisine_type==r})),"all"!=u&&(n=n.filter(function(e){return e.neighborhood==u})),a(null,n)}})}},{key:"fetchNeighborhoods",value:function(u){i.fetchRestaurants(function(e,n){if(e)u(e,null);else{var r=n.map(function(e,t){return n[t].neighborhood}),t=r.filter(function(e,t){return r.indexOf(e)==t});u(null,t)}})}},{key:"fetchCuisines",value:function(u){i.fetchRestaurants(function(e,n){if(e)u(e,null);else{var r=n.map(function(e,t){return n[t].cuisine_type}),t=r.filter(function(e,t){return r.indexOf(e)==t});u(null,t)}})}},{key:"urlForRestaurant",value:function(e){return"./restaurant.html?id="+e.id}},{key:"imageUrlForRestaurant",value:function(e,t){return 10==e.id&&(e.photograph=10),"dist/img/"+e.photograph+"-"+t+".webp"}},{key:"mapMarkerForRestaurant",value:function(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:i.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}},{key:"addReview",value:function(e){return fetch(i.REVIEWS_URL,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)})}},{key:"fetchReviews",value:function(n){fetch(i.REVIEWS_URL).then(function(e){return e.json()}).then(function(e){var t=e.filter(function(e){return e.restaurant_id==n});t?fillReviewsHTML(t):fillReviewsHTML(null)})}},{key:"submitFavRestaurant",value:function(e,t){fetch(""+i.DATABASE_URL+e+"/?is_favorite="+t,{method:"put"})}},{key:"DATABASE_URL",get:function(){return"http://localhost:1337/restaurants/"}},{key:"REVIEWS_URL",get:function(){return"http://localhost:1337/reviews/"}}]),i}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,

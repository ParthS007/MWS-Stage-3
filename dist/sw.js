
'use strict';(function(){function toArray(arr){return Array.prototype.slice.call(arr);}
function promisifyRequest(request){return new Promise(function(resolve,reject){request.onsuccess=function(){resolve(request.result);};request.onerror=function(){reject(request.error);};});}
function promisifyRequestCall(obj,method,args){var request;var p=new Promise(function(resolve,reject){request=obj[method].apply(obj,args);promisifyRequest(request).then(resolve,reject);});p.request=request;return p;}
function promisifyCursorRequestCall(obj,method,args){var p=promisifyRequestCall(obj,method,args);return p.then(function(value){if(!value)return;return new Cursor(value,p.request);});}
function proxyProperties(ProxyClass,targetProp,properties){properties.forEach(function(prop){Object.defineProperty(ProxyClass.prototype,prop,{get:function(){return this[targetProp][prop];},set:function(val){this[targetProp][prop]=val;}});});}
function proxyRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){if(!(prop in Constructor.prototype))return;ProxyClass.prototype[prop]=function(){return promisifyRequestCall(this[targetProp],prop,arguments);};});}
function proxyMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){if(!(prop in Constructor.prototype))return;ProxyClass.prototype[prop]=function(){return this[targetProp][prop].apply(this[targetProp],arguments);};});}
function proxyCursorRequestMethods(ProxyClass,targetProp,Constructor,properties){properties.forEach(function(prop){if(!(prop in Constructor.prototype))return;ProxyClass.prototype[prop]=function(){return promisifyCursorRequestCall(this[targetProp],prop,arguments);};});}
function Index(index){this._index=index;}
proxyProperties(Index,'_index',['name','keyPath','multiEntry','unique']);proxyRequestMethods(Index,'_index',IDBIndex,['get','getKey','getAll','getAllKeys','count']);proxyCursorRequestMethods(Index,'_index',IDBIndex,['openCursor','openKeyCursor']);function Cursor(cursor,request){this._cursor=cursor;this._request=request;}
proxyProperties(Cursor,'_cursor',['direction','key','primaryKey','value']);proxyRequestMethods(Cursor,'_cursor',IDBCursor,['update','delete']);['advance','continue','continuePrimaryKey'].forEach(function(methodName){if(!(methodName in IDBCursor.prototype))return;Cursor.prototype[methodName]=function(){var cursor=this;var args=arguments;return Promise.resolve().then(function(){cursor._cursor[methodName].apply(cursor._cursor,args);return promisifyRequest(cursor._request).then(function(value){if(!value)return;return new Cursor(value,cursor._request);});});};});function ObjectStore(store){this._store=store;}
ObjectStore.prototype.createIndex=function(){return new Index(this._store.createIndex.apply(this._store,arguments));};ObjectStore.prototype.index=function(){return new Index(this._store.index.apply(this._store,arguments));};proxyProperties(ObjectStore,'_store',['name','keyPath','indexNames','autoIncrement']);proxyRequestMethods(ObjectStore,'_store',IDBObjectStore,['put','add','delete','clear','get','getAll','getKey','getAllKeys','count']);proxyCursorRequestMethods(ObjectStore,'_store',IDBObjectStore,['openCursor','openKeyCursor']);proxyMethods(ObjectStore,'_store',IDBObjectStore,['deleteIndex']);function Transaction(idbTransaction){this._tx=idbTransaction;this.complete=new Promise(function(resolve,reject){idbTransaction.oncomplete=function(){resolve();};idbTransaction.onerror=function(){reject(idbTransaction.error);};idbTransaction.onabort=function(){reject(idbTransaction.error);};});}
Transaction.prototype.objectStore=function(){return new ObjectStore(this._tx.objectStore.apply(this._tx,arguments));};proxyProperties(Transaction,'_tx',['objectStoreNames','mode']);proxyMethods(Transaction,'_tx',IDBTransaction,['abort']);function UpgradeDB(db,oldVersion,transaction){this._db=db;this.oldVersion=oldVersion;this.transaction=new Transaction(transaction);}
UpgradeDB.prototype.createObjectStore=function(){return new ObjectStore(this._db.createObjectStore.apply(this._db,arguments));};proxyProperties(UpgradeDB,'_db',['name','version','objectStoreNames']);proxyMethods(UpgradeDB,'_db',IDBDatabase,['deleteObjectStore','close']);function DB(db){this._db=db;}
DB.prototype.transaction=function(){return new Transaction(this._db.transaction.apply(this._db,arguments));};proxyProperties(DB,'_db',['name','version','objectStoreNames']);proxyMethods(DB,'_db',IDBDatabase,['close']);['openCursor','openKeyCursor'].forEach(function(funcName){[ObjectStore,Index].forEach(function(Constructor){Constructor.prototype[funcName.replace('open','iterate')]=function(){var args=toArray(arguments);var callback=args[args.length-1];var nativeObject=this._store||this._index;var request=nativeObject[funcName].apply(nativeObject,args.slice(0,-1));request.onsuccess=function(){callback(request.result);};};});});[Index,ObjectStore].forEach(function(Constructor){if(Constructor.prototype.getAll)return;Constructor.prototype.getAll=function(query,count){var instance=this;var items=[];return new Promise(function(resolve){instance.iterateCursor(query,function(cursor){if(!cursor){resolve(items);return;}
items.push(cursor.value);if(count!==undefined&&items.length==count){resolve(items);return;}
cursor.continue();});});};});var exp={open:function(name,version,upgradeCallback){var p=promisifyRequestCall(indexedDB,'open',[name,version]);var request=p.request;request.onupgradeneeded=function(event){if(upgradeCallback){upgradeCallback(new UpgradeDB(request.result,event.oldVersion,request.transaction));}};return p.then(function(db){return new DB(db);});},delete:function(name){return promisifyRequestCall(indexedDB,'deleteDatabase',[name]);}};if(typeof module!=='undefined'){module.exports=exp;module.exports.default=module.exports;}
else{self.idb=exp;}}());let version='1.6.0';let staticCacheName='mws-rrs3-'+version;let DBName='mws-rrs3';let DBVersion=1;let dbPromise;self.addEventListener('activate',event=>{event.waitUntil((function(){self.clients.claim();initDB();})());});self.addEventListener('fetch',function(event){if(event.request.url.endsWith('localhost:1337/restaurants')){event.respondWith(dbPromise.then(function(db){var tx=db.transaction('restaurants','readonly');var store=tx.objectStore('restaurants');return store.getAll();}).then(function(items){if(!items.length){return fetch(event.request).then(function(response){return response.clone().json().then(json=>{console.log('event respond fetch from net');addAllData(json);return response;})});}else{console.log('event respond read from DB');let response=new Response(JSON.stringify(items),{headers:new Headers({'Content-type':'application/json','Access-Control-Allow-Credentials':'true'}),type:'cors',status:200});return response;}}));return;}
event.respondWith(caches.match(event.request).then(function(response){if(response){console.log('Found ',event.request.url,' in cache');return response;}
return fetch(event.request).then(function(response){return caches.open(staticCacheName).then(function(cache){if(event.request.url.indexOf('maps')<0){cache.put(event.request.url,response.clone());}
return response;});});}).catch(function(error){console.log('offline');}));});self.addEventListener('activate',function(event){console.log('Activating new service worker...');let cacheWhitelist=[staticCacheName];event.waitUntil(caches.keys().then(function(cacheNames){return Promise.all(cacheNames.map(function(cacheName){if(cacheWhitelist.indexOf(cacheName)===-1){return caches.delete(cacheName);}}));}));});function initDB(){dbPromise=idb.open(DBName,DBVersion,function(upgradeDb){console.log('making DB Store');if(!upgradeDb.objectStoreNames.contains('restaurants')){upgradeDb.createObjectStore('restaurants',{keyPath:'id'});}});}
function addAllData(rlist){let tx;dbPromise.then(function(db){tx=db.transaction('restaurants','readwrite');var store=tx.objectStore('restaurants');rlist.forEach(function(res){console.log('adding',res);store.put(res);});return tx.complete;}).then(function(){console.log('All data added to DB successfully');}).catch(function(err){tx.abort();console.log('error in DB adding',err);return false;});}
self.addEventListener('sync',function(event){if(event.tag==='sync'){event.waitUntil(sendReviews().then(()=>{console.log('synced');}).catch(err=>{console.log(err,'error syncing');}));}else if(event.tag==='favorite'){event.waitUntil(sendFavorites().then(()=>{console.log('favorites synced');}).catch(err=>{console.log(err,'error syncing favorites');}));}});function sendFavorites(){return idb.open('favorite',1).then(db=>{let tx=db.transaction('outbox','readonly');return tx.objectStore('outbox').getAll();}).then(items=>{return Promise.all(items.map(item=>{let id=item.id;console.log("sending favorite",item);return fetch(`http://localhost:1337/restaurants/${item.resId}/?is_favorite=${item.favorite}`,{method:'PUT'}).then(response=>{console.log(response);return response.json();}).then(data=>{console.log('added favorite',data);if(data){idb.open('favorite',1).then(db=>{let tx=db.transaction('outbox','readwrite');return tx.objectStore('outbox').delete(id);});}});}));});}
function sendReviews(){return idb.open('review',1).then(db=>{let tx=db.transaction('outbox','readonly');return tx.objectStore('outbox').getAll();}).then(reviews=>{return Promise.all(reviews.map(review=>{let reviewID=review.id;delete review.id;console.log("sending review",review);return fetch('http://localhost:1337/reviews',{method:'POST',body:JSON.stringify(review),headers:{'Accept':'application/json','Content-Type':'application/json'}}).then(response=>{console.log(response);return response.json();}).then(data=>{console.log('added review',data);if(data){idb.open('review',1).then(db=>{let tx=db.transaction('outbox','readwrite');return tx.objectStore('outbox').delete(reviewID);});}});}));});}